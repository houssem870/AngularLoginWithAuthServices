{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, TemplateRef, Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nclass TeleportService {\n  constructor() {\n    this.outlets = new BehaviorSubject('');\n    this.asObservable = this.outlets.asObservable();\n    this.ports = new Map();\n  }\n  outlet$(name) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n  newOutlet(name) {\n    this.outlets.next(name);\n  }\n}\nTeleportService.ɵfac = function TeleportService_Factory(t) {\n  return new (t || TeleportService)();\n};\nTeleportService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TeleportService,\n  factory: TeleportService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass TeleportOutletDirective {\n  constructor(vcr, service) {\n    this.vcr = vcr;\n    this.service = service;\n  }\n  ngOnChanges(changes) {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n  ngOnDestroy() {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n}\nTeleportOutletDirective.ɵfac = function TeleportOutletDirective_Factory(t) {\n  return new (t || TeleportOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(TeleportService));\n};\nTeleportOutletDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportOutletDirective,\n  selectors: [[\"\", \"teleportOutlet\", \"\"]],\n  inputs: {\n    teleportOutlet: \"teleportOutlet\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportOutlet: [{\n      type: Input\n    }]\n  });\n})();\nclass TeleportDirective {\n  constructor(tpl, service) {\n    this.tpl = tpl;\n    this.service = service;\n    this.subscription = null;\n  }\n  ngOnChanges(changes) {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe(outlet => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.dispose();\n  }\n  dispose() {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n}\nTeleportDirective.ɵfac = function TeleportDirective_Factory(t) {\n  return new (t || TeleportDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(TeleportService));\n};\nTeleportDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TeleportDirective,\n  selectors: [[\"\", \"teleportTo\", \"\"]],\n  inputs: {\n    teleportTo: \"teleportTo\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[teleportTo]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: TeleportService\n    }];\n  }, {\n    teleportTo: [{\n      type: Input\n    }]\n  });\n})();\nclass TeleportModule {}\nTeleportModule.ɵfac = function TeleportModule_Factory(t) {\n  return new (t || TeleportModule)();\n};\nTeleportModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TeleportModule\n});\nTeleportModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TeleportModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TeleportDirective, TeleportOutletDirective],\n      exports: [TeleportDirective, TeleportOutletDirective]\n    }]\n  }], null, null);\n})();\nfunction isTemplateRef(value) {\n  return value instanceof TemplateRef;\n}\nfunction isComponent(value) {\n  return typeof value === 'function';\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nclass DynamicViewComponent {}\nDynamicViewComponent.ɵfac = function DynamicViewComponent_Factory(t) {\n  return new (t || DynamicViewComponent)();\n};\nDynamicViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicViewComponent,\n  selectors: [[\"dynamic-view\"]],\n  inputs: {\n    content: \"content\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"innerHTML\"]],\n  template: function DynamicViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"innerHTML\", ctx.content, i0.ɵɵsanitizeHtml);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'dynamic-view',\n      template: ` <div [innerHTML]=\"content\"></div> `\n    }]\n  }], null, {\n    content: [{\n      type: Input\n    }]\n  });\n})();\nclass TplRef {\n  constructor(args) {\n    this.args = args;\n    this.wrapper = null;\n    if (this.args.vcr) {\n      this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n      this.viewRef.detectChanges();\n    } else {\n      this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});\n      this.viewRef.detectChanges();\n      this.args.appRef.attachView(this.viewRef);\n    }\n  }\n  detectChanges() {\n    this.viewRef.detectChanges();\n  }\n  getElement() {\n    const rootNodes = this.viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n    return this.element;\n  }\n  destroy() {\n    if (this.viewRef.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.viewRef);\n    }\n    this.viewRef.destroy();\n    this.viewRef = null;\n  }\n}\nclass StringRef {\n  constructor(value) {\n    this.value = value;\n  }\n  getElement() {\n    return this.value;\n  }\n  detectChanges() {}\n  destroy() {}\n}\nclass CompRef {\n  constructor(options) {\n    this.options = options;\n    if (options.vcr) {\n      this.compRef = options.vcr.createComponent(options.component, {\n        index: options.vcr.length,\n        injector: options.injector || options.vcr.injector\n      });\n    } else {\n      const factory = options.resolver.resolveComponentFactory(options.component);\n      this.compRef = factory.create(options.injector);\n      options.appRef.attachView(this.compRef.hostView);\n    }\n  }\n  get ref() {\n    return this.compRef;\n  }\n  setInput(input, value) {\n    this.compRef.instance[input] = value;\n    return this;\n  }\n  setInputs(inputs) {\n    Object.keys(inputs).forEach(input => {\n      this.compRef.instance[input] = inputs[input];\n    });\n    return this;\n  }\n  detectChanges() {\n    this.compRef.hostView.detectChanges();\n    return this;\n  }\n  appendTo(container) {\n    container.appendChild(this.getElement());\n    return this;\n  }\n  removeFrom(container) {\n    container.removeChild(this.getElement());\n    return this;\n  }\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n  getElement() {\n    return this.compRef.location.nativeElement;\n  }\n  destroy() {\n    this.compRef.destroy();\n    !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);\n    this.compRef = null;\n  }\n}\nclass ViewService {\n  constructor(resolver, injector, appRef) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.appRef = appRef;\n  }\n  createComponent(component, options = {}) {\n    return new CompRef({\n      component,\n      vcr: options.vcr,\n      injector: options.injector || this.injector,\n      appRef: this.appRef,\n      resolver: this.resolver\n    });\n  }\n  createTemplate(tpl, options = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context\n    });\n  }\n  createView(content, viewOptions = {}) {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n}\nViewService.ɵfac = function ViewService_Factory(t) {\n  return new (t || ViewService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ApplicationRef));\n};\nViewService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewService,\n  factory: ViewService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ApplicationRef\n    }];\n  }, null);\n})();\nclass DynamicViewDirective {\n  constructor(defaultTpl, vcr, viewService) {\n    this.defaultTpl = defaultTpl;\n    this.vcr = vcr;\n    this.viewService = viewService;\n  }\n  ngOnInit() {\n    this.resolveContentType();\n  }\n  ngOnChanges(changes) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n  resolveContentType() {\n    this.viewRef?.destroy();\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector\n      });\n      this.viewRef.setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n}\nDynamicViewDirective.ɵfac = function DynamicViewDirective_Factory(t) {\n  return new (t || DynamicViewDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(ViewService));\n};\nDynamicViewDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DynamicViewDirective,\n  selectors: [[\"\", \"dynamicView\", \"\"]],\n  inputs: {\n    view: [\"dynamicView\", \"view\"],\n    injector: [\"dynamicViewInjector\", \"injector\"],\n    context: [\"dynamicViewContext\", \"context\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[dynamicView]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: ViewService\n    }];\n  }, {\n    view: [{\n      type: Input,\n      args: ['dynamicView']\n    }],\n    injector: [{\n      type: Input,\n      args: ['dynamicViewInjector']\n    }],\n    context: [{\n      type: Input,\n      args: ['dynamicViewContext']\n    }]\n  });\n})();\nclass DynamicViewModule {}\nDynamicViewModule.ɵfac = function DynamicViewModule_Factory(t) {\n  return new (t || DynamicViewModule)();\n};\nDynamicViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DynamicViewModule\n});\nDynamicViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicViewModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DynamicViewDirective, DynamicViewComponent],\n      exports: [DynamicViewDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef };","map":{"version":3,"names":["i0","Injectable","Directive","Input","NgModule","TemplateRef","Component","BehaviorSubject","filter","map","TeleportService","constructor","outlets","asObservable","ports","Map","outlet$","name","pipe","current","get","newOutlet","next","ɵfac","ɵprov","type","args","providedIn","TeleportOutletDirective","vcr","service","ngOnChanges","changes","teleportOutlet","set","ngOnDestroy","delete","ViewContainerRef","ɵdir","selector","TeleportDirective","tpl","subscription","teleportTo","dispose","subscribe","outlet","viewRef","createEmbeddedView","unsubscribe","destroy","TeleportModule","ɵmod","ɵinj","declarations","exports","isTemplateRef","value","isComponent","isString","DynamicViewComponent","ɵcmp","template","content","TplRef","wrapper","context","detectChanges","appRef","attachView","getElement","rootNodes","length","Node","ELEMENT_NODE","element","document","createElement","append","parentNode","removeChild","detachView","StringRef","CompRef","options","compRef","createComponent","component","index","injector","factory","resolver","resolveComponentFactory","create","hostView","ref","setInput","input","instance","setInputs","inputs","Object","keys","forEach","appendTo","container","appendChild","removeFrom","getRawContent","outerHTML","location","nativeElement","ViewService","createTemplate","createView","viewOptions","ComponentFactoryResolver","Injector","ApplicationRef","DynamicViewDirective","defaultTpl","viewService","ngOnInit","resolveContentType","view","isFirstChange","DynamicViewModule"],"sources":["C:/Users/HoussemABASSI/authApp/node_modules/@ngneat/overview/fesm2020/ngneat-overview.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, NgModule, TemplateRef, Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nclass TeleportService {\n    constructor() {\n        this.outlets = new BehaviorSubject('');\n        this.asObservable = this.outlets.asObservable();\n        this.ports = new Map();\n    }\n    outlet$(name) {\n        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n    }\n    newOutlet(name) {\n        this.outlets.next(name);\n    }\n}\nTeleportService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTeleportService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\nclass TeleportOutletDirective {\n    constructor(vcr, service) {\n        this.vcr = vcr;\n        this.service = service;\n    }\n    ngOnChanges(changes) {\n        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n        // as keys for the `ports` map.\n        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n            this.service.ports.set(this.teleportOutlet, this.vcr);\n            this.service.newOutlet(this.teleportOutlet);\n        }\n    }\n    ngOnDestroy() {\n        this.service.ports.delete(this.teleportOutlet);\n    }\n}\nTeleportOutletDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportOutletDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: TeleportOutletDirective, selector: \"[teleportOutlet]\", inputs: { teleportOutlet: \"teleportOutlet\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportOutlet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: TeleportService }]; }, propDecorators: { teleportOutlet: [{\n                type: Input\n            }] } });\n\nclass TeleportDirective {\n    constructor(tpl, service) {\n        this.tpl = tpl;\n        this.service = service;\n        this.subscription = null;\n    }\n    ngOnChanges(changes) {\n        if (changes.teleportTo && typeof this.teleportTo === 'string') {\n            this.dispose();\n            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n                if (outlet) {\n                    this.viewRef = outlet.createEmbeddedView(this.tpl);\n                }\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.dispose();\n    }\n    dispose() {\n        this.subscription?.unsubscribe();\n        this.subscription = null;\n        this.viewRef?.destroy();\n    }\n}\nTeleportDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportDirective, deps: [{ token: i0.TemplateRef }, { token: TeleportService }], target: i0.ɵɵFactoryTarget.Directive });\nTeleportDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: TeleportDirective, selector: \"[teleportTo]\", inputs: { teleportTo: \"teleportTo\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[teleportTo]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: TeleportService }]; }, propDecorators: { teleportTo: [{\n                type: Input\n            }] } });\nclass TeleportModule {\n}\nTeleportModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTeleportModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] });\nTeleportModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: TeleportModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TeleportDirective, TeleportOutletDirective],\n                    exports: [TeleportDirective, TeleportOutletDirective],\n                }]\n        }] });\n\nfunction isTemplateRef(value) {\n    return value instanceof TemplateRef;\n}\nfunction isComponent(value) {\n    return typeof value === 'function';\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\n\nclass DynamicViewComponent {\n}\nDynamicViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDynamicViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: DynamicViewComponent, selector: \"dynamic-view\", inputs: { content: \"content\" }, ngImport: i0, template: ` <div [innerHTML]=\"content\"></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'dynamic-view',\n                    template: ` <div [innerHTML]=\"content\"></div> `,\n                }]\n        }], propDecorators: { content: [{\n                type: Input\n            }] } });\n\nclass TplRef {\n    constructor(args) {\n        this.args = args;\n        this.wrapper = null;\n        if (this.args.vcr) {\n            this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n            this.viewRef.detectChanges();\n        }\n        else {\n            this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});\n            this.viewRef.detectChanges();\n            this.args.appRef.attachView(this.viewRef);\n        }\n    }\n    detectChanges() {\n        this.viewRef.detectChanges();\n    }\n    getElement() {\n        const rootNodes = this.viewRef.rootNodes;\n        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n            this.element = rootNodes[0];\n        }\n        else {\n            this.element = document.createElement('div');\n            this.element.append(...rootNodes);\n        }\n        return this.element;\n    }\n    destroy() {\n        if (this.viewRef.rootNodes[0] !== 1) {\n            this.element?.parentNode.removeChild(this.element);\n            this.element = null;\n        }\n        if (!this.args.vcr) {\n            this.args.appRef.detachView(this.viewRef);\n        }\n        this.viewRef.destroy();\n        this.viewRef = null;\n    }\n}\n\nclass StringRef {\n    constructor(value) {\n        this.value = value;\n    }\n    getElement() {\n        return this.value;\n    }\n    detectChanges() { }\n    destroy() { }\n}\n\nclass CompRef {\n    constructor(options) {\n        this.options = options;\n        if (options.vcr) {\n            this.compRef = options.vcr.createComponent(options.component, {\n                index: options.vcr.length,\n                injector: options.injector || options.vcr.injector,\n            });\n        }\n        else {\n            const factory = options.resolver.resolveComponentFactory(options.component);\n            this.compRef = factory.create(options.injector);\n            options.appRef.attachView(this.compRef.hostView);\n        }\n    }\n    get ref() {\n        return this.compRef;\n    }\n    setInput(input, value) {\n        this.compRef.instance[input] = value;\n        return this;\n    }\n    setInputs(inputs) {\n        Object.keys(inputs).forEach((input) => {\n            this.compRef.instance[input] = inputs[input];\n        });\n        return this;\n    }\n    detectChanges() {\n        this.compRef.hostView.detectChanges();\n        return this;\n    }\n    appendTo(container) {\n        container.appendChild(this.getElement());\n        return this;\n    }\n    removeFrom(container) {\n        container.removeChild(this.getElement());\n        return this;\n    }\n    getRawContent() {\n        return this.getElement().outerHTML;\n    }\n    getElement() {\n        return this.compRef.location.nativeElement;\n    }\n    destroy() {\n        this.compRef.destroy();\n        !this.options.vcr && this.options.appRef.detachView(this.compRef.hostView);\n        this.compRef = null;\n    }\n}\n\nclass ViewService {\n    constructor(resolver, injector, appRef) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.appRef = appRef;\n    }\n    createComponent(component, options = {}) {\n        return new CompRef({\n            component,\n            vcr: options.vcr,\n            injector: options.injector || this.injector,\n            appRef: this.appRef,\n            resolver: this.resolver,\n        });\n    }\n    createTemplate(tpl, options = {}) {\n        return new TplRef({\n            vcr: options.vcr,\n            appRef: this.appRef,\n            tpl,\n            context: options.context,\n        });\n    }\n    createView(content, viewOptions = {}) {\n        if (isTemplateRef(content)) {\n            return this.createTemplate(content, viewOptions);\n        }\n        else if (isComponent(content)) {\n            return this.createComponent(content, viewOptions);\n        }\n        else if (isString(content)) {\n            return new StringRef(content);\n        }\n        else {\n            throw 'Type of content is not supported';\n        }\n    }\n}\nViewService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Injectable });\nViewService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: ViewService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; } });\n\nclass DynamicViewDirective {\n    constructor(defaultTpl, vcr, viewService) {\n        this.defaultTpl = defaultTpl;\n        this.vcr = vcr;\n        this.viewService = viewService;\n    }\n    ngOnInit() {\n        this.resolveContentType();\n    }\n    ngOnChanges(changes) {\n        if (changes.view && !changes.view.isFirstChange()) {\n            this.resolveContentType();\n        }\n    }\n    resolveContentType() {\n        this.viewRef?.destroy();\n        if (isString(this.view)) {\n            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n                vcr: this.vcr,\n                injector: this.injector,\n            });\n            this.viewRef.setInput('content', this.view).detectChanges();\n        }\n        else {\n            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n                vcr: this.vcr,\n                injector: this.injector ?? this.vcr.injector,\n                context: this.context,\n            });\n        }\n    }\n    ngOnDestroy() {\n        this.viewRef?.destroy();\n    }\n}\nDynamicViewDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: ViewService }], target: i0.ɵɵFactoryTarget.Directive });\nDynamicViewDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: DynamicViewDirective, selector: \"[dynamicView]\", inputs: { view: [\"dynamicView\", \"view\"], injector: [\"dynamicViewInjector\", \"injector\"], context: [\"dynamicViewContext\", \"context\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dynamicView]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: ViewService }]; }, propDecorators: { view: [{\n                type: Input,\n                args: ['dynamicView']\n            }], injector: [{\n                type: Input,\n                args: ['dynamicViewInjector']\n            }], context: [{\n                type: Input,\n                args: ['dynamicViewContext']\n            }] } });\nclass DynamicViewModule {\n}\nDynamicViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDynamicViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] });\nDynamicViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: DynamicViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [DynamicViewDirective, DynamicViewComponent],\n                    exports: [DynamicViewDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of overview\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}