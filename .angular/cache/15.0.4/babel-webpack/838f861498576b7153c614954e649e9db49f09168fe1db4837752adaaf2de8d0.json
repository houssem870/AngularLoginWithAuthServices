{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Token/token-service.service\";\nexport class Interceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    const myToken = this.tokenService.getToken();\n    if (myToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${myToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nInterceptor.ɵfac = function Interceptor_Factory(t) {\n  return new (t || Interceptor)(i0.ɵɵinject(i1.TokenServiceService));\n};\nInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Interceptor,\n  factory: Interceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,YAAiC;IAAjC,iBAAY,GAAZA,YAAY;EAAwB;EAExDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,OAAO,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IAC5C,IAAGD,OAAO,EAAC;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAG;UAACC,aAAa,EAAC,UAAUJ,OAAO;QAAE;OAChD,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAE7B;;AAbWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAY,SAAXZ,WAAW;AAAA","names":["Interceptor","constructor","tokenService","intercept","request","next","myToken","getToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\HoussemABASSI\\authApp\\src\\app\\Intercepter\\interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TokenServiceService } from '../Token/token-service.service';\n\n@Injectable()\nexport class Interceptor implements HttpInterceptor {\n\n  constructor(private tokenService: TokenServiceService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const myToken = this.tokenService.getToken();\n    if(myToken){\n      request = request.clone({\n        setHeaders : {Authorization:`Bearer ${myToken}`}\n      })\n    }\n    return next.handle(request);\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}